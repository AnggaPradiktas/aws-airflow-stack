AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  IngressCIDR:
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  IngressPort:
    Type: Number
  IamInstanceProfile:
    Type: String
  IamRole:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  SecretKeyName:
    Type: String
  LogsBucket:
    Type: String
  QueueName:
    Type: String

  # Airflow Config
  LoadExampleDags:
    Description: >-
      Load the example DAGs distributed with Airflow. Useful if deploying a
      stack for demonstrating a few topologies, operators and scheduling
      strategies.
    Type: String
    AllowedValues:
      - 'False'
      - 'True'
    Default: 'False'
  LoadDefaultCons:
    Description: >-
      Load the default connections initialized by Airflow. Most consider these
      unnecessary, which is why the default is to not load them.
    Type: String
    AllowedValues:
      - 'False'
      - 'True'
    Default: 'False'
  DatabaseURI:
    Description: >-
      The connection string URI to be used to connect to the metadata database.
    Type: String

  # Quick Start Overrides
  QSS3BucketName:
    Description: >-
      S3 bucket name for the Quick Start assets. You can specify your own bucket
      providing assets and submodules, if you want to override the Quick Start
      behavior for your specific implementation.
    Type: String
    Default: turbine-quickstart
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
  QSS3KeyPrefix:
    Description: >-
      S3 key prefix for the Quick Start assets. You can scpeficy your own
      "directory" providing the stack templates, if you want to override the
      Quick Start behavior for your specific implementation.
    Type: String
    Default: quickstart-turbine-airflow/
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstancesSecurityGroup
        - !Ref WebserverSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${AWS::StackName} \
            --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${AWS::StackName} \
            --resource LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            setup:
              command: !Sub |
                export AWS_STACK_NAME="${AWS::StackName}"
                export SECRET_KEY_NAME="${SecretKeyName}"
                export LOAD_EXAMPLES="${LoadExampleDags}"
                export LOAD_DEFAULTS="${LoadDefaultCons}"
                export DATABASE_URI="${DatabaseURI}"
                export LOGS_BUCKET="${LogsBucket}"
                export QUEUE_NAME="${QueueName}"
                aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts /opt/turbine
                chmod +x /opt/turbine/webserver.setup.sh
                /opt/turbine/webserver.setup.sh

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        The security group used by the Airflow webserver instance. It exposes
        the specified port for web access in from a given ip range.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: !Ref IngressCIDR
          IpProtocol: TCP
          FromPort: !Ref IngressPort
          ToPort: !Ref IngressPort
      Tags:
        - Key: Name
          Value: turbine-webserver-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Tags:
        - Key: Name
          Value: turbine-webserver
          PropagateAtLaunch: true

  WebserverInitMetadata:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - service
          default:
            - sysconf
        service:
          files:
            /usr/bin/turbine:
              mode: 755
              content: |
                #!/bin/sh
                exec /usr/local/bin/airflow webserver
        sysconf:
          commands:
            webvars:
              command: !Sub |
                PUBLIC=$(curl -s -o /dev/null -w "%{http_code}" \
                  http://169.254.169.254/latest/meta-data/public-ipv4)
                PUB_IPV4=$(ec2-metadata -v | awk '{print $2}')
                LOC_IPV4=$(ec2-metadata -o | awk '{print $2}')
                if [ $PUBLIC = "200" ]
                then HOSTNAME=$PUB_IPV4
                else HOSTNAME=$LOC_IPV4
                fi
                BASE_URL=$http://$HOSTNAME:${IngressPort}
                echo "AIRFLOW__WEBSERVER__BASE_URL=$BASE_URL" \
                  >> /etc/sysconfig/airflow.env
                echo "AIRFLOW__WEBSERVER__WEB_SERVER_PORT=${IngressPort}" \
                  >> /etc/sysconfig/airflow.env

Outputs:
  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
