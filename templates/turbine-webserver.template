AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1ID:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2ID:
    Type: AWS::EC2::Subnet::Id
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  IngressCIDR:
    Type: String
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
  IngressPort:
    Type: Number
  IamInstanceProfile:
    Type: String
  IamRole:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  ClusterStack:
    Type: String

Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstancesSecurityGroup
        - !Ref WebserverSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${AWS::StackName} \
            --resource WebserverInitMetadata
            --configsets setup
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${ClusterStack} \
            --resource SharedCloudInitMetadata
          /opt/aws/bin/cfn-init -v \
            --region ${AWS::Region} \
            --role ${IamRole} \
            --stack ${AWS::StackName} \
            --resource WebserverInitMetadata

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        The security group used by the Airflow webserver instance. It exposes
        the specified port for web access in from a given ip range.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: !Ref IngressCIDR
          IpProtocol: TCP
          FromPort: !Ref IngressPort
          ToPort: !Ref IngressPort
      Tags:
        - Key: Name
          Value: turbine-webserver-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PublicSubnet1ID
        - !Ref PublicSubnet2ID
      Tags:
        - Key: Name
          Value: turbine-webserver
          PropagateAtLaunch: true

  WebserverInitMetadata:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - service
          default:
            - sysconf
        service:
          files:
            /usr/bin/turbine:
              mode: 755
              content: |
                #!/bin/sh
                exec /usr/local/bin/airflow webserver
        sysconf:
          commands:
            webvars:
              command: !Sub |
                PUBLIC=$(curl -s -o /dev/null -w "%{http_code}" \
                  http://169.254.169.254/latest/meta-data/public-ipv4)
                PUB_IPV4=$(ec2-metadata -v | awk '{print $2}')
                LOC_IPV4=$(ec2-metadata -o | awk '{print $2}')
                if [ $PUBLIC = "200" ]
                then HOSTNAME=$PUB_IPV4
                else HOSTNAME=$LOC_IPV4
                fi
                BASE_URL=$http://$HOSTNAME:${IngressPort}
                echo "AIRFLOW__WEBSERVER__BASE_URL=$BASE_URL" \
                  >> /etc/sysconfig/airflow
                echo "AIRFLOW__WEBSERVER__WEB_SERVER_PORT=${IngressPort}" \
                  >> /etc/sysconfig/airflow

Outputs:
  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
