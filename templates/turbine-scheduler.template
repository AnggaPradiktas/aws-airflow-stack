AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1AID:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2AID:
    Type: AWS::EC2::Subnet::Id
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  IamInstanceProfile:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  SecretKeyName:
    Type: String

  # Quick Start Overrides
  QSS3BucketName:
    Description: >-
      S3 bucket name for the Quick Start assets. You can specify your own bucket
      providing assets and submodules, if you want to override the Quick Start
      behavior for your specific implementation.
    Type: String
    Default: turbine-quickstart
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
  QSS3KeyPrefix:
    Description: >-
      S3 key prefix for the Quick Start assets. You can scpeficy your own
      "directory" providing the stack templates, if you want to override the
      Quick Start behavior for your specific implementation.
    Type: String
    Default: quickstart-turbine-airflow/
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).

Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstancesSecurityGroup
        - !Ref SchedulerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts /opt

  SchedulerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        The security group used by the Airflow scheduler instance. Not initially
        useful but included to facilitate narrowing custom rules.
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: turbine-scheduler-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: '1'
      MinSize: '1'
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1AID
        - !Ref PrivateSubnet2AID
      Tags:
        - Key: Name
          Value: turbine-scheduler
          PropagateAtLaunch: true

  SchedulerInitMetadata:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - secrets
            - service
          default:
            - migrate
        secrets:
          packages:
            yum:
              - python3
            python:
              - cryptography
          commands:
            generate:
              command: !Sub |
                pip3 install cryptography
                FERNET_KEY=$(aws ssm get-parameter \
                  --name ${SecretKeyName} \
                  --region '${AWS::Region}' \
                  --query 'Parameter.Value')
                if [ "$FERNET_KEY" = "" ]; then
                  FERNET_KEY=$(python3 -c "if True:#
                    from cryptography.fernet import Fernet
                    key = Fernet.generate_key().decode()
                    print(key)")
                  aws ssm put-parameter \
                    --name ${SecretKeyName} \
                    --region '${AWS::Region}' \
                    --value $FERNET_KEY \
                    --type SecureString
                fi
        service:
          files:
            /usr/bin/turbine:
              mode: 755
              content: |
                #!/bin/sh
                exec /usr/local/bin/airflow scheduler
        migrate:
          commands:
            migration:
              command: |
                sudo su - ec2-user
                export $(cat /etc/sysconfig/airflow | xargs)
                if [ "$TURBINE__CORE__LOAD_DEFAULTS" == "True" ]; then
                  airflow initdb
                else
                  airflow upgradedb
                fi

Outputs:
  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
