AWSTemplateFormatVersion: 2010-09-09
Parameters:
  # Networking
  VPCID:
    Description: An existing VPC for the cluster
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1AID:
    Description: An existing private Subnet in some Availability Zone
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2AID:
    Description: An existing private Subnet in another Availability Zone
    Type: AWS::EC2::Subnet::Id
  InstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  IamInstanceProfile:
    Type: String
  ImageId:
    Type: AWS::EC2::Image::Id
  InstanceType:
    Type: String
  MinGroupSize:
    Description: The minimum number of active worker instances.
    Type: Number
    Default: 1
  MaxGroupSize:
    Description: The maximum number of active worker instances.
    Type: Number
    Default: 10
  ShrinkThreshold:
    Description: >-
      The threshold for the average queue size from which going equal or below
      will trigger the AutoScaling group to Scale In, deallocating one worker
      instance.
    Type: Number
    Default: 0.5
  GrowthThreshold:
    Description: >-
      The threshold for the average queue size from which going equal or above
      will trigger the AutoScaling group to Scale Out, allocating one worker
      instance.
    Type: Number
    Default: 0.9
  EfsFileSystem:
    Type: String
  SecretKeyName:
    Type: String
  LogsBucket:
    Type: String
  QueueName:
    Type: String

  # Cluster Resources
  RDSSecretsArn:
    Description: >-
      The AWS Secrets Manager resource ARN holding the metadata database
      credentials.
    Type: String

  # Airflow Config
  LoadExampleDags:
    Description: >-
      Load the example DAGs distributed with Airflow. Useful if deploying a
      stack for demonstrating a few topologies, operators and scheduling
      strategies.
    Type: String
    AllowedValues:
      - 'False'
      - 'True'
    Default: 'False'
  LoadDefaultCons:
    Description: >-
      Load the default connections initialized by Airflow. Most consider these
      unnecessary, which is why the default is to not load them.
    Type: String
    AllowedValues:
      - 'False'
      - 'True'
    Default: 'False'

  # Quick Start Overrides
  QSS3BucketName:
    Description: >-
      S3 bucket name for the Quick Start assets. You can specify your own bucket
      providing assets and submodules, if you want to override the Quick Start
      behavior for your specific implementation.
    Type: String
    Default: turbine-quickstart
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
  QSS3KeyPrefix:
    Description: >-
      S3 key prefix for the Quick Start assets. You can scpeficy your own
      "directory" providing the stack templates, if you want to override the
      Quick Start behavior for your specific implementation.
    Type: String
    Default: quickstart-turbine-airflow/
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).

Resources:

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref IamInstanceProfile
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref AWS::Region
        - AMZNLINUX2
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstancesSecurityGroup
        - !Ref WorkersetSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $?
            --stack ${AWS::StackName} \
            --resource LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            setup:
              command: !Sub |
                export AWS_STACK_NAME="${AWS::StackName}"
                export SECRET_KEY_NAME="${SecretKeyName}"
                export QUEUE_NAME="${QueueName}"
                export LOGS_BUCKET="${LogsBucket}"
                export FILE_SYSTEM_ID="${EfsFileSystem}"
                export RDS_SECRETS_ARN="${RDSSecretsArn}"
                export LOAD_EXAMPLES="${LoadExampleDags}"
                export LOAD_DEFAULTS="${LoadDefaultCons}"
                aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts /opt/turbine
                chmod +x /opt/turbine/workerset.setup.sh
                /opt/turbine/workerset.setup.sh

  WorkersetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        The security group used by the Airflow worker instances. It exposes the
        a special port where the Airflow webserver can fetch logs directly.
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref InstancesSecurityGroup
          IpProtocol: TCP
          FromPort: 8793
          ToPort: 8793
      Tags:
        - Key: Name
          Value: turbine-workerset-sg

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref MaxGroupSize
      MinSize: !Ref MinGroupSize
      MetricsCollection:
        - Granularity: 1Minute
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1AID
        - !Ref PrivateSubnet2AID
      Tags:
        - Key: Name
          Value: turbine-worker
          PropagateAtLaunch: true

  CloudWatchMetricLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Handler: load_metric.handler
      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: !Sub ${QSS3KeyPrefix}functions/package.zip
      Environment:
        Variables:
          GroupName: !Ref AutoScalingGroup
          QueueName: !Ref QueueName
          StackName: !Ref AWS::StackName
      Role: !GetAtt CloudWatchMetricLambdaRole.Arn

  CloudWatchMetricLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: cloudwatch-rw-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - cloudwatch:GetMetric*
                  - cloudwatch:PutMetricData

  CloudWatchMetricLambdaTimer:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - CloudWatchMetricLambda
            - Arn
          Id: TargetFunction

  CloudWatchMetricLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CloudWatchMetricLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - CloudWatchMetricLambdaTimer
        - Arn

  LoadAboveThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref LoadAboveThresholdPolicy
      Namespace: Turbine
      MetricName: ClusterLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref GrowthThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold

  LoadAboveThresholdPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

  LoadBelowThresholdAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref LoadBelowThresholdPolicy
      Namespace: Turbine
      MetricName: ClusterLoad
      Dimensions:
        - Name: StackName
          Value: !Ref AWS::StackName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: !Ref ShrinkThreshold
      ComparisonOperator: LessThanOrEqualToThreshold

  LoadBelowThresholdPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      Cooldown: '600'
      AutoScalingGroupName: !Ref AutoScalingGroup

  GracefulShutdownLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      DefaultResult: CONTINUE
      HeartbeatTimeout: 180
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

Outputs:
  AutoScalingGroup:
    Description: The workers autoscaling group
    Value: !Ref AutoScalingGroup

Mappings:
  AWSAMIRegionMap:
    ap-northeast-1:
      AMZNLINUX2: ami-052652af12b58691f
    ap-northeast-2:
      AMZNLINUX2: ami-0db78afd3d150fc18
    ap-south-1:
      AMZNLINUX2: ami-03b5297d565ef30a6
    ap-southeast-1:
      AMZNLINUX2: ami-0cbc6aae997c6538a
    ap-southeast-2:
      AMZNLINUX2: ami-08fdde86b93accf1c
    ca-central-1:
      AMZNLINUX2: ami-0bf54ac1b628cf143
    eu-central-1:
      AMZNLINUX2: ami-0ec1ba09723e5bfac
    eu-west-1:
      AMZNLINUX2: ami-04d5cc9b88f9d1d39
    eu-west-2:
      AMZNLINUX2: ami-0cb790308f7591fa6
    eu-west-3:
      AMZNLINUX2: ami-07eda9385feb1e969
    sa-east-1:
      AMZNLINUX2: ami-0b032e878a66c3b68
    us-east-1:
      AMZNLINUX2: ami-0fc61db8544a617ed
    us-east-2:
      AMZNLINUX2: ami-0e01ce4ee18447327
    us-west-1:
      AMZNLINUX2: ami-09a7fe78668f1e2c0
    us-west-2:
      AMZNLINUX2: ami-0ce21b51cb31a48b8
